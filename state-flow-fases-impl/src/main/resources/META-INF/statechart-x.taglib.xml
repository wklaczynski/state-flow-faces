<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2018 Waldemar Kłaczyński.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<facelet-taglib
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
    version="2.0">
    <namespace>http://xmlns.apache.org/faces/scxml</namespace>
        
    <function>
        <description>
            Tests if an input state name is in current stats.
        </description>
        <function-name>in</function-name>
        <function-class>org.apache.faces.impl.state.tag.FacesFlowBuiltin</function-class>
        <function-signature>boolean isMember(java.lang.String)</function-signature>
    </function>
        
    <!--Core Constructs-->
    <tag>
        <tag-name>scxml</tag-name>
        <description><![CDATA[The top-level wrapper element, which carries version information. The actual state machine consists of its children. Note that only one of the children is active at any one time. See 3.11 Legal State Configurations and Specifications for details.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.StateChartTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The name of this state machine. It is for purely informational purposes.]]></description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The id of the initial state(s) for the document. If not specified, the default initial state is the first child state in document order.]]></description>
            <name>initial</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>state</tag-name>
        <description><![CDATA[Holds the representation of a state.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.StateTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The identifier for this state. See 3.14 IDs for details.]]></description>
            <name>id</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>parallel</tag-name>
        <description><![CDATA[The <parallel> element encapsulates a set of child states which are simultaneously active when the parent element is active.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.ParallelTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The identifier for this state. See 3.14 IDs for details.]]></description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>transition</tag-name>
        <description><![CDATA[Transitions between states are triggered by events and conditionalized via guard conditions. They may contain executable content, which is executed when the transition is taken.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.TransitionTagHandler</handler-class>
        <attribute>
            <description><![CDATA[A list of designators of events that trigger this transition. See 3.13 Selecting and Executing Transitions for details on how transitions are selected and executed. See E Schema for the definition of the datatype.]]></description>
            <name>event</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The guard condition for this transition. See 3.13 Selecting and Executing Transitions for details.]]></description>
            <name>cond</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The identifier(s) of the state or parallel region to transition to. See 3.13 Selecting and Executing Transitions for details.]]></description>
            <name>target</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Determines whether the source state is exited in transitions whose target state is a descendant of the source state. See 3.13 Selecting and Executing Transitions for details.]]></description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>initial</tag-name>
        <description><![CDATA[This element represents the default initial state for a complex <state> element (i.e. one containing child <state> or <parallel> elements.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.InitialTagHandler</handler-class>
    </tag>
    <tag>
        <tag-name>final</tag-name>
        <description><![CDATA[<final> represents a final state of an <scxml> or compound <state> element.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.FinalTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The identifier for this state. See 3.14 IDs for details.]]></description>
            <name>id</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>onentry</tag-name>
        <description><![CDATA[A wrapper element containing executable content to be executed when the state is entered.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.OnEntryTagHandler</handler-class>
    </tag>
    <tag>
        <tag-name>onexit</tag-name>
        <description><![CDATA[A wrapper element containing executable content to be executed when the state is exited]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.OnExitTagHandler</handler-class>
    </tag>
    <tag>
        <tag-name>history</tag-name>
        <description><![CDATA[The <history> pseudo-state allows a state machine to remember its state configuration. A <transition> taking the <history> state as its target will return the state machine to this recorded configuration.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.HistoryTagHandler</handler-class>
        <attribute>
            <description><![CDATA[Identifier for this pseudo-state. See 3.14 IDs for details.]]></description>
            <name>id</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Determines whether the active atomic substate(s) of the current state or only its immediate active substate(s) are recorded.]]></description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    
    <!--Executable Content-->
    <tag>
        <tag-name>raise</tag-name>
        <description><![CDATA[The <raise> element raises an event in the current SCXML session. Note that the event will not be processed until the current block of executable content has completed and all events that are already in the internal event queue have been processed. For example, suppose the <raise> element occurs first in the <onentry> handler of state S followed by executable content elements ec1 and ec2. If event e1 is already in the internal event queue when S is entered, the event generated by <raise> will not be processed until ec1 and ec2 have finished execution and e1 has been processed.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.RaiseTagHandler</handler-class>
        <attribute>
            <description><![CDATA[Specifies the name of the event. This will be matched against the 'event' attribute of transitions.]]></description>
            <name>event</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>if</tag-name>
        <description><![CDATA[<if> is a container for conditionally executed elements.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.IfTagHandler</handler-class>
        <attribute>
            <description><![CDATA[A boolean expression. See 5.9.1 Conditional Expressions for details.]]></description>
            <name>cond</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>elseif</tag-name>
        <description><![CDATA[<elseif> is an empty element that partitions the content of an <if>, and provides a condition that determines whether the partition is executed.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.ElseIfTagHandler</handler-class>
        <attribute>
            <description><![CDATA[A boolean expression. See 5.9.1 Conditional Expressions for details.]]></description>
            <name>cond</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>else</tag-name>
        <description><![CDATA[<else> is an empty element that partitions the content of an <if>. It is equivalent to an <elseif> with a "cond" that always evaluates to true.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.ElseTagHandler</handler-class>
    </tag>
    <tag>
        <tag-name>foreach</tag-name>
        <description><![CDATA[The <foreach> element allows an SCXML application to iterate through a collection in the data model and to execute the actions contained within it for each item in the collection.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.ForeathTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The <foreach> element will iterate over a shallow copy of this collection.]]></description>
            <name>array</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A variable that stores a different item of the collection in each iteration of the loop.]]></description>
            <name>item</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A variable that stores the current iteration index upon each iteration of the foreach loop.]]></description>
            <name>index</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>log</tag-name>
        <description><![CDATA[<log> allows an application to generate a logging or debug message.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.LogTagHandler</handler-class>
        <attribute>
            <description><![CDATA[A character string with an implementation-dependent interpretation. It is intended to provide meta-data about the log string specified by 'expr'.]]></description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[An expression returning the value to be logged. See 5.9.3 Legal Data Values and Value Expressions for details. The nature of the logging mechanism is implementation-dependent. For example, the SCXML processor may convert this value to a convenient format before logging it.]]></description>
            <name>expr</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>

    <!--Data Model and Data Manipulation-->
    <tag>
        <tag-name>datamodel</tag-name>
        <description><![CDATA[<datamodel> is a wrapper element which encapsulates any number of <data> elements, each of which defines a single data object. The exact nature of the data object depends on the data model language used.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.DataModelTagHandler</handler-class>
    </tag>
    <tag>
        <tag-name>data</tag-name>
        <description><![CDATA[The <data> element is used to declare and populate portions of the data model.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.DataTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The identifier for this state. See 3.14 IDs for details.]]></description>
            <name>id</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Gives the location from which the data object should be fetched. See 5.9.3 Legal Data Values and Value Expressions for details.]]></description>
            <name>src</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Evaluates to provide the value of the data item. See 5.9.3 Legal Data Values and Value Expressions for details.]]></description>
            <name>expr</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>assign</tag-name>
        <description><![CDATA[The <assign> element is used to modify the data model.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.AssignTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The location in the data model into which to insert the new value. See 5.9.2 Location Expressions for details.]]></description>
            <name>location</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[An expression returning the value to be assigned. See 5.9.3 Legal Data Values and Value Expressions for details.]]></description>
            <name>expr</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>donedata</tag-name>
        <description><![CDATA[A wrapper element holding data to be returned when a <final> state is entered.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.DoneDataTagHandler</handler-class>
    </tag>
    <tag>
        <tag-name>content</tag-name>
        <description><![CDATA[A container element holding data to be passed to an external service.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.ContentTagHandler</handler-class>
        <attribute>
            <description><![CDATA[A value expression. See 5.9.3 Legal Data Values and Value Expressions for details.]]></description>
            <name>expr</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>param</tag-name>
        <description><![CDATA[The <param> tag provides a general way of identifying a key and a dynamically calculated value which can be passed to an external service or included in an event.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.ParamTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The name of the key.]]></description>
            <name>name</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A value expression (see 5.9.3 Legal Data Values and Value Expressions) that is evaluated to provide the value.]]></description>
            <name>expr</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A location expression (see 5.9.2 Location Expressions) that specifies the location in the datamodel to retrieve the value from.]]></description>
            <name>location</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>script</tag-name>
        <description><![CDATA[The <script> element adds scripting capability to the state machine.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.ScriptTagHandler</handler-class>
        <attribute>
            <description><![CDATA[Gives the location from which the script should be downloaded.]]></description>
            <name>src</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    
    
    <!--External Communications-->
    <tag>
        <tag-name>send</tag-name>
        <description><![CDATA[<send> is used to send events and data to external systems, including external SCXML Interpreters, or to raise events in the current SCXML session.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.SendTagHandler</handler-class>
        <attribute>
            <description><![CDATA[A string indicating the name of message being generated. See E Schema for details on the data type.]]></description>
            <name>event</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The unique identifier of the message target that the platform should send the event to. See 6.2.4 The Target of Send for details.]]></description>
            <name>target</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The URI that identifies the transport mechanism for the message. See 6.2.5 The Type of Send for details.]]></description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A string literal to be used as the identifier for this instance of <send>. See 3.14 IDs for details.]]></description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Indicates how long the processor should wait before dispatching the message. See E Schema for details on the data type.]]></description>
            <name>delay</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A space-separated list of one or more data model locations to be included as attribute/value pairs with the message. (The name of the location is the attribute and the value stored at the location is the value.) See 5.9.2 Location Expressions for details.]]></description>
            <name>namelist</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>cancel</tag-name>
        <description><![CDATA[The <cancel> element is used to cancel a delayed <send> event. The SCXML Processor MUST NOT allow <cancel> to affect events that were not raised in the same session. The Processor SHOULD make its best attempt to cancel all delayed events with the specified id. Note, however, that it can not be guaranteed to succeed, for example if the event has already been delivered by the time the <cancel> tag executes.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.CancelTagHandler</handler-class>
        <attribute>
            <description><![CDATA[The ID of the event(s) to be cancelled. If multiple delayed events have this sendid, the Processor will cancel them all.]]></description>
            <name>sendid</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>invoke</tag-name>
        <description><![CDATA[The <invoke> element is used to create an instance of an external service.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.InvokeTagHandler</handler-class>
        <attribute>
            <description><![CDATA[A URI specifying the type of the external service. See below for details.]]></description>
            <name>type</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A URI to be passed to the external service. See below for details.]]></description>
            <name>src</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[A string literal to be used as the identifier for this instance of <invoke>. See 3.14 IDs for details.]]></description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>finalize</tag-name>
        <description><![CDATA[The <finalize> element enables an invoking session to update its data model with data contained in events returned by the invoked session. <finalize> contains executable content that is executed whenever the external service returns an event after the <invoke> has been executed. This content is applied before the system looks for transitions that match the event. Within the executable content, the system variable '_event' can be used to refer to the data contained in the event which is being processed.In the case of parallel states, only the finalize code in the original invoking state is executed.]]></description>
        <handler-class>org.apache.faces.impl.state.tag.scxml.FinalizeTagHandler</handler-class>
    </tag>
    
    <!--Custom action unspecfied SCXML-->
    <tag>
        <tag-name>var</tag-name>
        <description><![CDATA[The <var> element is used to modify the data model.]]></description>
        <handler-class>org.apache.faces.state.tag.CustomActionHandler</handler-class>
        <attribute>
            <description><![CDATA[The name in the data model into which to insert the new value. See 5.9.2 Location Expressions for details.]]></description>
            <name>name</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[An expression returning the value to be assigned. See 5.9.3 Legal Data Values and Value Expressions for details.]]></description>
            <name>expr</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    
                        
</facelet-taglib>
