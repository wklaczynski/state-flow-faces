<?xml version='1.0' encoding='UTF-8' ?> 
<!--
Copyright 2018 Waldemar Kłaczyński.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<scxml 
    xmlns="http://xmlns.apache.org/faces/scxml"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    initial="start">

    <datamodel>
        <data id="hasback" expr="#{scxml_has_parent == true}"/>
        <data id="chart_title" expr="State Flow Faces from SCXML file"/>
        <data id="chart_view" expr="/flow1/faces-flow-main.scxml"/>
        <data id="assignedTest2" expr="no tested"/>
        <data id="book" src="/test/data.xml"/>
    </datamodel>
    
    <state id="start">
        <onentry>
            <if cond="#{main.prepare()}">
                <raise event="main.prepare.success"/>
                <else/>
                <raise event="main.prepare.failed"/>
            </if>
        </onentry>
        <transition event="main.prepare.success" target="main"/>
        <transition event="main.prepare.failed" target="exit"/>
    </state>

    <state id="main">
        <invoke type="view" src="MainPage.xhtml"/>
        <transition event="error.execution" target="main"/>

        <transition event="view.action.show" target="show-client"/>
        <transition event="view.action.exit" target="exit"/>
        <transition event="view.action.assign" target="assing-test"/>
        <transition event="view.action.clear" target="clear-test"/>
    </state> 

    <state id="assing-test">
        <onentry>
            <assign 
                location="#{main.assignedTest1}" 
                expr="#{book['client[last()]/phone[@type=\'mobile\']']}"
            />
            <raise event="assing-test.finish"/>
        </onentry>
        <transition event="assing-test.finish" target="main"/>
    </state> 

    <state id="clear-test">
        <onentry>
            <assign location="#{main.assignedTest1}"/>
            <raise event="clear-test.finish"/>
        </onentry>
        <transition event="clear-test.finish" target="main"/>
    </state> 


    <state id="show-client"> 
        <invoke type="scxml" src="faces-flow-show-client.xhtml">
            <param name="clientId" expr="#{param.clid}"/>
            <param name="clientName" expr="#{book['client[@id=\'1\']/phone[@type=\'mobile\']']}"/>
        </invoke>
        <transition event="error.execution" target="main"/>
        <transition event="done.invoke.show-client" target="main"/>
    </state>      


    <state id="error"> 
        <invoke type="scxml" src="/common/error.scxml">
            <finalize/>
        </invoke>
        <transition event="error.invoke.done" target="exit"/>
    </state>      

    <final id="exit">
    </final>

</scxml>